public class GutterGrime extends CardImpl {°Ïpublic GutterGrime(UUID ownerId) {°Ïsuper(ownerId, 186, "Gutter Grime", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, "{4}{G}");°Ïthis.expansionSetCode = "ISD";°Ïthis.addAbility(new GutterGrimeTriggeredAbility());°Ï}°Ïpublic GutterGrime(final GutterGrime card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic GutterGrime copy() {°Ïreturn new GutterGrime(this);°Ï}°Ï}°Ïclass GutterGrimeTriggeredAbility extends TriggeredAbilityImpl {°Ïpublic GutterGrimeTriggeredAbility() {°Ïsuper(Zone.BATTLEFIELD, new AddCountersSourceEffect(CounterType.SLIME.createInstance()), false);°Ïthis.addEffect(new GutterGrimeEffect());°Ï}°Ïpublic GutterGrimeTriggeredAbility(GutterGrimeTriggeredAbility ability) {°Ïsuper(ability);°Ï}°Ï@Override°Ïpublic GutterGrimeTriggeredAbility copy() {°Ïreturn new GutterGrimeTriggeredAbility(this);°Ï}°Ï@Override°Ïpublic boolean checkEventType(GameEvent event, Game game) {°Ïreturn event.getType() == EventType.ZONE_CHANGE;°Ï}°Ï@Override°Ïpublic boolean checkTrigger(GameEvent event, Game game) {°ÏUUID targetId = event.getTargetId();°ÏMageObject card = game.getLastKnownInformation(targetId, Zone.BATTLEFIELD);°Ïif (card instanceof Permanent && !(card instanceof PermanentToken)) {°ÏPermanent permanent = (Permanent) card;°ÏZoneChangeEvent zEvent = (ZoneChangeEvent) event;°Ïif (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD°Ï&& permanent.getControllerId().equals(this.controllerId)°Ï&& (targetId.equals(this.getSourceId())°Ï|| (permanent.getCardType().contains(CardType.CREATURE)°Ï&& !(permanent instanceof PermanentToken)))) {°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic String getRule() {°Ïreturn "Whenever a nontoken creature you control dies, put a slime counter on {this}, then put a green Ooze creature token onto the battlefield with \"This creature's power and toughness are each equal to the number of slime counters on {this}.\"";°Ï}°Ï}°Ïclass GutterGrimeEffect extends OneShotEffect {°Ïpublic GutterGrimeEffect() {°Ïsuper(Outcome.PutCreatureInPlay);°Ï}°Ïpublic GutterGrimeEffect(final GutterGrimeEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏGutterGrimeToken token = new GutterGrimeToken(source.getSourceId());°Ïtoken.putOntoBattlefield(1, game, source.getSourceId(), source.getControllerId());°Ïreturn true;°Ï}°Ï@Override°Ïpublic GutterGrimeEffect copy() {°Ïreturn new GutterGrimeEffect(this);°Ï}°Ï}°Ïclass GutterGrimeToken extends Token {°Ïpublic GutterGrimeToken(UUID sourceId) {°Ïsuper("Ooze", "green Ooze creature token with \"This creature's power and toughness are each equal to the number of slime counters on Gutter Grime.\"");°ÏcardType.add(CardType.CREATURE);°Ïsubtype.add("Ooze");°Ïcolor.setGreen(true);°Ïpower = new MageInt(0);°Ïtoughness = new MageInt(0);°Ïthis.addAbility(new SimpleStaticAbility(Zone.BATTLEFIELD, new SetPowerToughnessSourceEffect(new GutterGrimeCounters(sourceId), Duration.WhileOnBattlefield)));°Ï}°Ï}°Ïclass GutterGrimeCounters implements DynamicValue {°Ïprivate final UUID sourceId;°Ïpublic GutterGrimeCounters(UUID sourceId) {°Ïthis.sourceId = sourceId;°Ï}°Ï@Override°Ïpublic int calculate(Game game, Ability sourceAbility, Effect effect) {°ÏPermanent p = game.getPermanent(sourceId);°Ïif (p != null) {°Ïreturn p.getCounters().getCount(CounterType.SLIME);°Ï}°Ïreturn 0;°Ï}°Ï@Override°Ïpublic GutterGrimeCounters copy() {°Ïreturn this;°Ï}°Ï@Override°Ïpublic String getMessage() {°Ïreturn "slime counters on Gutter Grime";°Ï}°Ï@Override°Ïpublic String toString() {°Ïreturn "1";°Ï}°Ï}°Ï
