public class GarrukTheVeilCursed extends CardImpl {°Ïpublic GarrukTheVeilCursed(UUID ownerId) {°Ïsuper(ownerId, 1181, "Garruk, the Veil-Cursed", Rarity.MYTHIC, new CardType[]{CardType.PLANESWALKER}, "");°Ïthis.expansionSetCode = "ISD";°Ïthis.subtype.add("Garruk");°Ïthis.nightCard = true;°Ïthis.canTransform = true;°Ïthis.color.setGreen(true);°Ïthis.color.setBlack(true);°ÏLoyaltyAbility ability1 = new LoyaltyAbility(new CreateTokenEffect(new WolfTokenWithDeathtouch()), 1);°Ïthis.addAbility(ability1);°ÏLoyaltyAbility ability2 = new LoyaltyAbility(new GarrukTheVeilCursedEffect(), -1);°Ïthis.addAbility(ability2);°ÏEffects effects1 = new Effects();°ÏBoostControlledEffect effect = new BoostControlledEffect(new GarrukTheVeilCursedValue(), new GarrukTheVeilCursedValue(), Duration.EndOfTurn);°Ïeffect.setLockedIn(true);°Ïeffect.setRule("Creatures you control get +X/+X until end of turn, where X is the number of creature cards in your graveyard");°Ïeffects1.add(effect);°Ïeffects1.add(new GainAbilityControlledEffect(TrampleAbility.getInstance(), Duration.EndOfTurn, new FilterCreaturePermanent()));°Ïthis.addAbility(new LoyaltyAbility(effects1, -3));°Ï}°Ïpublic GarrukTheVeilCursed(final GarrukTheVeilCursed card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic GarrukTheVeilCursed copy() {°Ïreturn new GarrukTheVeilCursed(this);°Ï}°Ï}°Ïclass GarrukTheVeilCursedValue implements DynamicValue {°Ï@Override°Ïpublic int calculate(Game game, Ability sourceAbility, Effect effect) {°ÏPlayer player = game.getPlayer(sourceAbility.getControllerId());°Ïif (player != null) {°Ïreturn player.getGraveyard().getCards(new FilterCreatureCard(), game).size();°Ï}°Ïreturn 0;°Ï}°Ï@Override°Ïpublic DynamicValue copy() {°Ïreturn this;°Ï}°Ï@Override°Ïpublic String getMessage() {°Ïreturn "the number of creature cards in your graveyard";°Ï}°Ï@Override°Ïpublic String toString() {°Ïreturn "+X";°Ï}°Ï}°Ïclass GarrukTheVeilCursedEffect extends OneShotEffect {°Ïprivate static final FilterControlledCreaturePermanent filterCreature = new FilterControlledCreaturePermanent("a creature you control");°Ïpublic GarrukTheVeilCursedEffect() {°Ïsuper(Outcome.Benefit);°ÏstaticText = "Sacrifice a creature. If you do, search your library for a creature card, reveal it, put it into your hand, then shuffle your library";°Ï}°Ïpublic GarrukTheVeilCursedEffect(final GarrukTheVeilCursedEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer controller = game.getPlayer(source.getControllerId());°Ïif (controller == null) {°Ïreturn false;°Ï}°ÏTarget target = new TargetControlledPermanent(1, 1, filterCreature, false);°Ïboolean sacrificed = false;°Ïif (target.canChoose(controller.getId(), game)) {°Ïwhile (controller.canRespond() && !target.isChosen() && target.canChoose(controller.getId(), game)) {°Ïcontroller.chooseTarget(Outcome.Sacrifice, target, source, game);°Ï}°Ïfor (int idx = 0; idx < target.getTargets().size(); idx++) {°ÏPermanent permanent = game.getPermanent(target.getTargets().get(idx));°Ïif (permanent != null) {°Ïsacrificed |= permanent.sacrifice(source.getSourceId(), game);°Ï}°Ï}°Ï}°Ïif (sacrificed) {°ÏFilterCreatureCard filter = new FilterCreatureCard();°ÏTargetCardInLibrary targetInLibrary = new TargetCardInLibrary(filter);°ÏCards cards = new CardsImpl();°Ïif (controller.searchLibrary(targetInLibrary, game)) {°Ïfor (UUID cardId : targetInLibrary.getTargets()) {°ÏCard card = controller.getLibrary().remove(cardId, game);°Ïif (card != null) {°Ïcard.moveToZone(Zone.HAND, source.getSourceId(), game, false);°Ïcards.add(card);°Ï}°Ï}°Ï}°Ïif (cards.size() > 0) {°Ïcontroller.revealCards("Garruk, the Veil-Cursed", cards, game);°Ï}°Ïcontroller.shuffleLibrary(game);°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic GarrukTheVeilCursedEffect copy() {°Ïreturn new GarrukTheVeilCursedEffect(this);°Ï}°Ï}°Ï
