public class MemorysJourney extends CardImpl {°Ïpublic MemorysJourney(UUID ownerId) {°Ïsuper(ownerId, 66, "Memory's Journey", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, "{1}{U}");°Ïthis.expansionSetCode = "ISD";°Ïthis.getSpellAbility().addEffect(new MemorysJourneyEffect());°Ïthis.getSpellAbility().addTarget(new TargetPlayer());°Ïthis.getSpellAbility().addTarget(new MemorysJourneyTarget());°Ïthis.addAbility(new FlashbackAbility(new ManaCostsImpl("{G}"), TimingRule.INSTANT));°Ï}°Ïpublic MemorysJourney(final MemorysJourney card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic MemorysJourney copy() {°Ïreturn new MemorysJourney(this);°Ï}°Ï}°Ïclass MemorysJourneyEffect extends OneShotEffect {°Ïpublic MemorysJourneyEffect() {°Ïsuper(Outcome.Neutral);°Ïthis.staticText = "Target player shuffles up to three target cards from his or her graveyard into his or her library";°Ï}°Ïpublic MemorysJourneyEffect(final MemorysJourneyEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic MemorysJourneyEffect copy() {°Ïreturn new MemorysJourneyEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer player = game.getPlayer(source.getFirstTarget());°Ïif (player != null) {°ÏList<UUID> targets = source.getTargets().get(1).getTargets();°Ïboolean shuffle = false;°Ïfor (UUID targetId : targets) {°ÏCard card = game.getCard(targetId);°Ïif (card != null) {°Ïif (player.getGraveyard().contains(card.getId())) {°Ïplayer.getGraveyard().remove(card);°Ïcard.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true);°Ïshuffle = true;°Ï}°Ï}°Ï}°Ïif (shuffle) {°Ïplayer.shuffleLibrary(game);°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ïclass MemorysJourneyTarget extends TargetCard {°Ïpublic MemorysJourneyTarget() {°Ïsuper(0, 3, Zone.GRAVEYARD, new FilterCard());°Ï}°Ïpublic MemorysJourneyTarget(final MemorysJourneyTarget target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID id, Ability source, Game game) {°ÏCard card = game.getCard(id);°Ïif (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {°ÏUUID firstTarget = source.getFirstTarget();°Ïif (firstTarget != null && game.getPlayer(firstTarget).getGraveyard().contains(id)) {°Ïreturn filter.match(card, game);°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic MemorysJourneyTarget copy() {°Ïreturn new MemorysJourneyTarget(this);°Ï}°Ï}°Ï
