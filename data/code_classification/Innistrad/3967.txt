public class PastInFlames extends CardImpl {°Ïpublic PastInFlames(UUID ownerId) {°Ïsuper(ownerId, 155, "Past in Flames", Rarity.MYTHIC, new CardType[]{CardType.SORCERY}, "{3}{R}");°Ïthis.expansionSetCode = "ISD";°Ïthis.getSpellAbility().addEffect(new PastInFlamesEffect());°Ïthis.addAbility(new FlashbackAbility(new ManaCostsImpl("{4}{R}"), TimingRule.SORCERY));°Ï}°Ïpublic PastInFlames(final PastInFlames card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic PastInFlames copy() {°Ïreturn new PastInFlames(this);°Ï}°Ï}°Ïclass PastInFlamesEffect extends ContinuousEffectImpl {°Ïpublic PastInFlamesEffect() {°Ïsuper(Duration.EndOfTurn, Layer.AbilityAddingRemovingEffects_6, SubLayer.NA, Outcome.AddAbility);°Ïthis.staticText = "Each instant and sorcery card in your graveyard gains flashback until end of turn. The flashback cost is equal to its mana cost";°Ï}°Ïpublic PastInFlamesEffect(final PastInFlamesEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic PastInFlamesEffect copy() {°Ïreturn new PastInFlamesEffect(this);°Ï}°Ï@Override°Ïpublic void init(Ability source, Game game) {°Ïsuper.init(source, game);°Ïif (this.affectedObjectsSet) {°ÏPlayer player = game.getPlayer(source.getControllerId());°Ïif (player != null) {°Ïfor (UUID cardId: player.getGraveyard()) {°ÏCard card = game.getCard(cardId);°Ïif (card.getCardType().contains(CardType.INSTANT) || card.getCardType().contains(CardType.SORCERY)) {°ÏaffectedObjectList.add(new MageObjectReference(card, game));°Ï}°Ï}°Ï}°Ï}°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer player = game.getPlayer(source.getControllerId());°Ïif (player != null) {°Ïfor (UUID cardId: player.getGraveyard()) {°Ïif (affectedObjectList.contains(new MageObjectReference(cardId, game))) {°ÏCard card = game.getCard(cardId);°ÏFlashbackAbility ability = null;°Ïif (card.getCardType().contains(CardType.INSTANT)) {°Ïability = new FlashbackAbility(card.getManaCost(), TimingRule.INSTANT);°Ï}°Ïelse if (card.getCardType().contains(CardType.SORCERY)) {°Ïability = new FlashbackAbility(card.getManaCost(), TimingRule.SORCERY);°Ï}°Ïif (ability != null) {°Ïability.setSourceId(cardId);°Ïability.setControllerId(card.getOwnerId());°Ïgame.getState().addOtherAbility(card, ability);°Ï}°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ï
