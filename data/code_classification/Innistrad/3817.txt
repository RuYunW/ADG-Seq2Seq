public class BackFromTheBrink extends CardImpl {°Ïpublic BackFromTheBrink(UUID ownerId) {°Ïsuper(ownerId, 44, "Back from the Brink", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, "{4}{U}{U}");°Ïthis.expansionSetCode = "ISD";°ÏEffect effect = new PutTokenOntoBattlefieldCopyTargetEffect();°Ïeffect.setText("Put a token onto the battlefield that's a copy of that card");°Ïthis.addAbility(new ActivateAsSorceryActivatedAbility(Zone.BATTLEFIELD, effect, new BackFromTheBrinkCost()));°Ï}°Ïpublic BackFromTheBrink(final BackFromTheBrink card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic BackFromTheBrink copy() {°Ïreturn new BackFromTheBrink(this);°Ï}°Ï}°Ïclass BackFromTheBrinkCost extends CostImpl {°Ïpublic BackFromTheBrinkCost() {°ÏTarget target = new TargetCardInYourGraveyard(new FilterCreatureCard("creature card from your graveyard"));°Ïtarget.setNotTarget(true);°Ïthis.addTarget(target);°Ïthis.text = "Exile a creature card from your graveyard and pay its mana cost";°Ï}°Ïpublic BackFromTheBrinkCost(final BackFromTheBrinkCost cost) {°Ïsuper(cost);°Ï}°Ï@Override°Ïpublic BackFromTheBrinkCost copy() {°Ïreturn new BackFromTheBrinkCost(this);°Ï}°Ï@Override°Ïpublic boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {°Ïreturn targets.canChoose(controllerId, game);°Ï}°Ï@Override°Ïpublic boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {°Ïif (targets.choose(Outcome.Exile, controllerId, sourceId, game)) {°ÏPlayer controller = game.getPlayer(controllerId);°Ïif (controller != null) {°ÏCard card = controller.getGraveyard().get(targets.getFirstTarget(), game);°Ïif (card != null && controller.moveCards(card, null, Zone.EXILED, ability, game)) {°Ïability.getEffects().get(0).setTargetPointer(new FixedTarget(card.getId()));°Ïpaid = card.getManaCost().pay(ability, game, sourceId, controllerId, noMana);°Ï}°Ï}°Ï}°Ïreturn paid;°Ï}°Ï}°Ï
