public class ScreechingBat extends CardImpl {°Ïpublic ScreechingBat(UUID ownerId) {°Ïsuper(ownerId, 114, "Screeching Bat", Rarity.UNCOMMON, new CardType[]{CardType.CREATURE}, "{2}{B}");°Ïthis.expansionSetCode = "ISD";°Ïthis.subtype.add("Bat");°Ïthis.canTransform = true;°Ïthis.secondSideCard = new StalkingVampire(ownerId);°Ïthis.power = new MageInt(2);°Ïthis.toughness = new MageInt(2);°Ïthis.addAbility(FlyingAbility.getInstance());°Ïthis.addAbility(new TransformAbility());°Ïthis.addAbility(new ConditionalTriggeredAbility(new ScreechingBatBeginningOfUpkeepTriggeredAbility(), new TransformedCondition(true), ""));°Ï}°Ïpublic ScreechingBat(final ScreechingBat card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic ScreechingBat copy() {°Ïreturn new ScreechingBat(this);°Ï}°Ï}°Ïclass ScreechingBatBeginningOfUpkeepTriggeredAbility extends TriggeredAbilityImpl {°Ïpublic ScreechingBatBeginningOfUpkeepTriggeredAbility() {°Ïsuper(Zone.BATTLEFIELD, new ScreechingBatTransformSourceEffect(), true);°Ï}°Ïpublic ScreechingBatBeginningOfUpkeepTriggeredAbility(final ScreechingBatBeginningOfUpkeepTriggeredAbility ability) {°Ïsuper(ability);°Ï}°Ï@Override°Ïpublic ScreechingBatBeginningOfUpkeepTriggeredAbility copy() {°Ïreturn new ScreechingBatBeginningOfUpkeepTriggeredAbility(this);°Ï}°Ï@Override°Ïpublic boolean checkEventType(GameEvent event, Game game) {°Ïreturn event.getType() == EventType.UPKEEP_STEP_PRE;°Ï}°Ï@Override°Ïpublic boolean checkTrigger(GameEvent event, Game game) {°Ïreturn event.getPlayerId().equals(this.controllerId);°Ï}°Ï@Override°Ïpublic String getRule() {°Ïreturn "At the beginning of your upkeep, you may pay {2}{B}{B}. If you do, transform {this}.";°Ï}°Ï}°Ïclass ScreechingBatTransformSourceEffect extends OneShotEffect {°Ïpublic ScreechingBatTransformSourceEffect() {°Ïsuper(Outcome.Transform);°ÏstaticText = "transform {this}";°Ï}°Ïpublic ScreechingBatTransformSourceEffect(final ScreechingBatTransformSourceEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic ScreechingBatTransformSourceEffect copy() {°Ïreturn new ScreechingBatTransformSourceEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPermanent permanent = game.getPermanent(source.getSourceId());°Ïif (permanent != null) {°ÏCost cost = new ManaCostsImpl("{2}{B}{B}");°Ïif (cost.pay(source, game, permanent.getControllerId(), permanent.getControllerId(), false, null)) {°Ïif (permanent.canTransform()) {°Ïpermanent.setTransformed(!permanent.isTransformed());°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ï
