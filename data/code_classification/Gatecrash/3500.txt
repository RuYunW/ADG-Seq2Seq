public class UnexpectedResults extends CardImpl {°Ïpublic UnexpectedResults(UUID ownerId) {°Ïsuper(ownerId, 203, "Unexpected Results", Rarity.RARE, new CardType[]{CardType.SORCERY}, "{2}{G}{U}");°Ïthis.expansionSetCode = "GTC";°Ïthis.getSpellAbility().addEffect(new UnexpectedResultEffect());°Ï}°Ïpublic UnexpectedResults(final UnexpectedResults card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic UnexpectedResults copy() {°Ïreturn new UnexpectedResults(this);°Ï}°Ï}°Ïclass UnexpectedResultEffect extends OneShotEffect {°Ïpublic UnexpectedResultEffect() {°Ïsuper(Outcome.PlayForFree);°Ïthis.staticText = "Shuffle your library, then reveal the top card. If it's a nonland card, you may cast it without paying its mana cost. If it's a land card, you may put it onto the battlefield and return Unexpected Results to its owner's hand";°Ï}°Ïpublic UnexpectedResultEffect(final UnexpectedResultEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic UnexpectedResultEffect copy() {°Ïreturn new UnexpectedResultEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer controller = game.getPlayer(source.getControllerId());°ÏCard sourceCard = game.getCard(source.getSourceId());°Ïif (controller == null || sourceCard == null) {°Ïreturn false;°Ï}°Ïif (controller.getLibrary().size() > 0) {°Ïcontroller.shuffleLibrary(game);°ÏCard card = controller.getLibrary().getFromTop(game);°Ïif (card == null) {°Ïreturn false;°Ï}°Ïcontroller.revealCards(sourceCard.getName(), new CardsImpl(card), game);°Ïif (card.getCardType().contains(CardType.LAND)) {°ÏString message = "Put " + card.getName() + " onto the battlefield?";°Ïif (controller.chooseUse(Outcome.PutLandInPlay, message, source, game)) {°Ïcard.putOntoBattlefield(game, Zone.LIBRARY, source.getSourceId(), source.getControllerId());°Ïreturn sourceCard.moveToZone(Zone.HAND, source.getSourceId(), game, false);°Ï}°Ï} else {°Ïif (controller.chooseUse(outcome, new StringBuilder("Cast ").append(card.getName()).append(" without paying its mana cost?").toString(), source, game)) {°Ïreturn controller.cast(card.getSpellAbility(), game, true);°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ï
