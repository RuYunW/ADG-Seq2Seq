public class BaneAlleyBroker extends CardImpl {°Ïpublic BaneAlleyBroker(UUID ownerId) {°Ïsuper(ownerId, 145, "Bane Alley Broker", Rarity.UNCOMMON, new CardType[]{CardType.CREATURE}, "{1}{U}{B}");°Ïthis.expansionSetCode = "GTC";°Ïthis.subtype.add("Human");°Ïthis.subtype.add("Rogue");°Ïthis.power = new MageInt(0);°Ïthis.toughness = new MageInt(3);°Ïthis.addAbility(new SimpleActivatedAbility(Zone.BATTLEFIELD, new BaneAlleyBrokerDrawExileEffect(), new TapSourceCost()));°Ïthis.addAbility(new SimpleStaticAbility(Zone.ALL, new BaneAlleyBrokerLookAtCardEffect()));°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new ReturnToHandTargetEffect(), new ManaCostsImpl("{U}{B}"));°Ïability.addCost(new TapSourceCost());°Ïability.addTarget(new TargetCardInBaneAlleyBrokerExile(this.getId()));°Ïthis.addAbility(ability);°Ï}°Ïpublic BaneAlleyBroker(final BaneAlleyBroker card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic BaneAlleyBroker copy() {°Ïreturn new BaneAlleyBroker(this);°Ï}°Ï}°Ïclass BaneAlleyBrokerDrawExileEffect extends OneShotEffect {°Ïpublic BaneAlleyBrokerDrawExileEffect() {°Ïsuper(Outcome.DrawCard);°ÏstaticText = "Draw a card, then exile a card from your hand face down";°Ï}°Ïpublic BaneAlleyBrokerDrawExileEffect(final BaneAlleyBrokerDrawExileEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer controller = game.getPlayer(source.getControllerId());°Ïif (controller != null) {°Ïcontroller.drawCards(1, game);°ÏTarget target = new TargetCardInHand(new FilterCard("card to exile"));°Ïif (controller.chooseTarget(outcome, target, source, game)) {°ÏCard card = game.getCard(target.getFirstTarget());°ÏMageObject sourceObject = game.getObject(source.getSourceId());°Ïif (card != null && sourceObject != null) {°Ïif (card.moveToExile(CardUtil.getCardExileZoneId(game, source), new StringBuilder(sourceObject.getName()).toString(), source.getSourceId(), game)) {°Ïcard.setFaceDown(true, game);°Ïreturn true;°Ï}°Ï}°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic BaneAlleyBrokerDrawExileEffect copy() {°Ïreturn new BaneAlleyBrokerDrawExileEffect(this);°Ï}°Ï}°Ïclass TargetCardInBaneAlleyBrokerExile extends TargetCard {°Ïpublic TargetCardInBaneAlleyBrokerExile(UUID CardId) {°Ïsuper(1, 1, Zone.EXILED, new FilterCard("card exiled with Bane Alley Broker"));°Ï}°Ïpublic TargetCardInBaneAlleyBrokerExile(final TargetCardInBaneAlleyBrokerExile target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {°ÏSet<UUID> possibleTargets = new HashSet<>();°ÏCard sourceCard = game.getCard(sourceId);°Ïif (sourceCard != null) {°ÏUUID exileId = CardUtil.getCardExileZoneId(game, sourceId);°ÏExileZone exile = game.getExile().getExileZone(exileId);°Ïif (exile != null && exile.size() > 0) {°ÏpossibleTargets.addAll(exile);°Ï}°Ï}°Ïreturn possibleTargets;°Ï}°Ï@Override°Ïpublic boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {°ÏCard sourceCard = game.getCard(sourceId);°Ïif (sourceCard != null) {°ÏUUID exileId = CardUtil.getCardExileZoneId(game, sourceId);°ÏExileZone exile = game.getExile().getExileZone(exileId);°Ïif (exile != null && exile.size() > 0) {°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID id, Ability source, Game game) {°ÏCard card = game.getCard(id);°Ïif (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {°ÏExileZone exile = null;°ÏCard sourceCard = game.getCard(source.getSourceId());°Ïif (sourceCard != null) {°ÏUUID exileId = CardUtil.getCardExileZoneId(game, source);°Ïexile = game.getExile().getExileZone(exileId);°Ï}°Ïif (exile != null && exile.contains(id)) {°Ïreturn filter.match(card, source.getControllerId(), game);°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic TargetCardInBaneAlleyBrokerExile copy() {°Ïreturn new TargetCardInBaneAlleyBrokerExile(this);°Ï}°Ï}°Ïclass BaneAlleyBrokerLookAtCardEffect extends AsThoughEffectImpl {°Ïpublic BaneAlleyBrokerLookAtCardEffect() {°Ïsuper(AsThoughEffectType.LOOK_AT_FACE_DOWN, Duration.EndOfGame, Outcome.Benefit);°ÏstaticText = "You may look at cards exiled with {this}";°Ï}°Ïpublic BaneAlleyBrokerLookAtCardEffect(final BaneAlleyBrokerLookAtCardEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïreturn true;°Ï}°Ï@Override°Ïpublic BaneAlleyBrokerLookAtCardEffect copy() {°Ïreturn new BaneAlleyBrokerLookAtCardEffect(this);°Ï}°Ï@Override°Ïpublic boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {°Ïif (affectedControllerId.equals(source.getControllerId())) {°ÏCard card = game.getCard(objectId);°Ïif (card != null) {°ÏMageObject sourceObject = game.getObject(source.getSourceId());°Ïif (sourceObject == null) {°Ïreturn false;°Ï}°ÏUUID exileId = CardUtil.getCardExileZoneId(game, source);°ÏExileZone exile = game.getExile().getExileZone(exileId);°Ïreturn exile != null && exile.contains(objectId);°Ï}°Ï}°Ïreturn false;°Ï}°Ï}°Ï
