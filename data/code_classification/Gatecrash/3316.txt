public class AureliaTheWarleader extends CardImpl {°Ïpublic AureliaTheWarleader(UUID ownerId) {°Ïsuper(ownerId, 143, "Aurelia, the Warleader", Rarity.MYTHIC, new CardType[]{CardType.CREATURE}, "{2}{R}{R}{W}{W}");°Ïthis.expansionSetCode = "GTC";°Ïthis.supertype.add("Legendary");°Ïthis.subtype.add("Angel");°Ïthis.power = new MageInt(3);°Ïthis.toughness = new MageInt(4);°Ïthis.addAbility(FlyingAbility.getInstance());°Ïthis.addAbility(VigilanceAbility.getInstance());°Ïthis.addAbility(HasteAbility.getInstance());°ÏAbility ability = new AureliaAttacksTriggeredAbility(new UntapAllControllerEffect(new FilterControlledCreaturePermanent(),"untap all creatures you control"), false);°Ïability.addEffect(new AdditionalCombatPhaseEffect());°Ïthis.addAbility(ability);°Ï}°Ïpublic AureliaTheWarleader(final AureliaTheWarleader card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic AureliaTheWarleader copy() {°Ïreturn new AureliaTheWarleader(this);°Ï}°Ï}°Ïclass AureliaAttacksTriggeredAbility extends TriggeredAbilityImpl {°Ïprotected String text;°Ïpublic AureliaAttacksTriggeredAbility(Effect effect, boolean optional) {°Ïsuper(Zone.BATTLEFIELD, effect, optional);°Ï}°Ïpublic AureliaAttacksTriggeredAbility(Effect effect, boolean optional, String text) {°Ïsuper(Zone.BATTLEFIELD, effect, optional);°Ïthis.text = text;°Ï}°Ïpublic AureliaAttacksTriggeredAbility(final AureliaAttacksTriggeredAbility ability) {°Ïsuper(ability);°Ïthis.text = ability.text;°Ï}°Ï@Override°Ïpublic void reset(Game game) {°ÏCard sourceCard = game.getCard(getSourceId());°Ïgame.getState().setValue(getValueKey(sourceCard, game), 0);°Ï}°Ï@Override°Ïpublic boolean checkEventType(GameEvent event, Game game) {°Ïreturn event.getType() == EventType.ATTACKER_DECLARED;°Ï}°Ï@Override°Ïpublic boolean checkTrigger(GameEvent event, Game game) {°Ïif (event.getSourceId().equals(this.getSourceId()) ) {°ÏCard sourceCard = game.getCard(getSourceId());°ÏInteger amountAttacks = (Integer) game.getState().getValue(getValueKey(sourceCard, game));°Ïif (amountAttacks == null || amountAttacks < 1) {°Ïif (amountAttacks == null) {°ÏamountAttacks = 1;°Ï} else {°Ï++amountAttacks;°Ï}°Ïgame.getState().setValue(getValueKey(sourceCard, game), amountAttacks);°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ïprotected String getValueKey(Card sourceCard, Game game) {°Ïif (sourceCard == null) {°Ïreturn "";°Ï}°Ïreturn new StringBuilder(this.getId().toString()).append(sourceCard.getZoneChangeCounter(game)).append("amountAttacks").toString();°Ï}°Ï@Override°Ïpublic String getRule() {°Ïif (text == null || text.isEmpty()) {°Ïreturn "Whenever {this} attacks for the first time each turn, " + super.getRule();°Ï}°Ïreturn text;°Ï}°Ï@Override°Ïpublic AureliaAttacksTriggeredAbility copy() {°Ïreturn new AureliaAttacksTriggeredAbility(this);°Ï}°Ï}°Ïclass AdditionalCombatPhaseEffect extends OneShotEffect {°Ïpublic AdditionalCombatPhaseEffect() {°Ïsuper(Outcome.Benefit);°ÏstaticText = "After this phase, there is an additional combat phase";°Ï}°Ïpublic AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic AdditionalCombatPhaseEffect copy() {°Ïreturn new AdditionalCombatPhaseEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïgame.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false));°Ïreturn true;°Ï}°Ï}°Ï
