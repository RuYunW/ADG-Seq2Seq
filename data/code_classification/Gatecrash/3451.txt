public class Realmwright extends CardImpl {°Ïpublic Realmwright(UUID ownerId) {°Ïsuper(ownerId, 45, "Realmwright", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{U}");°Ïthis.expansionSetCode = "GTC";°Ïthis.subtype.add("Vedalken");°Ïthis.subtype.add("Wizard");°Ïthis.power = new MageInt(1);°Ïthis.toughness = new MageInt(1);°Ïthis.addAbility(new AsEntersBattlefieldAbility(new ChooseBasicLandTypeEffect(Outcome.Neutral)));°Ïthis.addAbility(new SimpleStaticAbility(Zone.BATTLEFIELD, new RealmwrightEffect2()));°Ï}°Ïpublic Realmwright(final Realmwright card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic Realmwright copy() {°Ïreturn new Realmwright(this);°Ï}°Ï}°Ïclass RealmwrightEffect2 extends ContinuousEffectImpl {°Ïpublic RealmwrightEffect2() {°Ïsuper(Duration.WhileOnBattlefield, Outcome.Neutral);°ÏstaticText = "Lands you control are the chosen type in addition to their other types";°Ï}°Ïpublic RealmwrightEffect2(final RealmwrightEffect2 effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic RealmwrightEffect2 copy() {°Ïreturn new RealmwrightEffect2(this);°Ï}°Ï@Override°Ïpublic boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {°ÏPlayer you = game.getPlayer(source.getControllerId());°ÏList<Permanent> lands = game.getBattlefield().getAllActivePermanents(new FilterControlledLandPermanent(), source.getControllerId(), game);°ÏString choice = (String) game.getState().getValue(source.getSourceId().toString() + ChooseBasicLandTypeEffect.VALUE_KEY);°Ïif (you != null && choice != null) {°Ïfor (Permanent land : lands) {°Ïif (land != null) {°Ïswitch (layer) {°Ïcase TypeChangingEffects_4:°Ïif (sublayer == SubLayer.NA && !land.getSubtype().contains(choice)) {°Ïland.getSubtype().add(choice);°Ï}°Ïbreak;°Ïcase AbilityAddingRemovingEffects_6:°Ïif (sublayer == SubLayer.NA) {°Ïboolean addAbility = true;°Ïif (choice.equals("Forest")) {°Ïfor (Ability existingAbility : land.getAbilities()) {°Ïif (existingAbility instanceof GreenManaAbility) {°ÏaddAbility = false;°Ïbreak;°Ï}°Ï}°Ïif (addAbility) {°Ïland.addAbility(new GreenManaAbility(), source.getSourceId(), game);°Ï}°Ï}°Ïif (choice.equals("Plains")) {°Ïfor (Ability existingAbility : land.getAbilities()) {°Ïif (existingAbility instanceof WhiteManaAbility) {°ÏaddAbility = false;°Ïbreak;°Ï}°Ï}°Ïif (addAbility) {°Ïland.addAbility(new WhiteManaAbility(), source.getSourceId(), game);°Ï}°Ï}°Ïif (choice.equals("Mountain")) {°Ïfor (Ability existingAbility : land.getAbilities()) {°Ïif (existingAbility instanceof RedManaAbility) {°ÏaddAbility = false;°Ïbreak;°Ï}°Ï}°Ïif (addAbility) {°Ïland.addAbility(new RedManaAbility(), source.getSourceId(), game);°Ï}°Ï}°Ïif (choice.equals("Island")) {°Ïfor (Ability existingAbility : land.getAbilities()) {°Ïif (existingAbility instanceof BlueManaAbility) {°ÏaddAbility = false;°Ïbreak;°Ï}°Ï}°Ïif (addAbility) {°Ïland.addAbility(new BlueManaAbility(), source.getSourceId(), game);°Ï}°Ï}°Ïif (choice.equals("Swamp")) {°Ïfor (Ability existingAbility : land.getAbilities()) {°Ïif (existingAbility instanceof BlackManaAbility) {°ÏaddAbility = false;°Ïbreak;°Ï}°Ï}°Ïif (addAbility) {°Ïland.addAbility(new BlackManaAbility(), source.getSourceId(), game);°Ï}°Ï}°Ï}°Ïbreak;°Ï}°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïreturn false;°Ï}°Ï@Override°Ïpublic boolean hasLayer(Layer layer) {°Ïreturn layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;°Ï}°Ï}°Ï
