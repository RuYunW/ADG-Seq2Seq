public class Bioshift extends CardImpl {°Ïpublic Bioshift(UUID ownerId) {°Ïsuper(ownerId, 214, "Bioshift", Rarity.COMMON, new CardType[]{CardType.INSTANT}, "{G/U}");°Ïthis.expansionSetCode = "GTC";°ÏgetSpellAbility().addEffect(new MoveCounterFromTargetToTargetEffect());°ÏgetSpellAbility().addTarget(new TargetCreaturePermanent(new FilterCreaturePermanent("creature (you take counters from)")));°ÏgetSpellAbility().addTarget(new BioshiftSecondTargetCreaturePermanent());°Ï}°Ïpublic Bioshift(final Bioshift card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic Bioshift copy() {°Ïreturn new Bioshift(this);°Ï}°Ï}°Ïclass MoveCounterFromTargetToTargetEffect extends OneShotEffect {°Ïpublic MoveCounterFromTargetToTargetEffect() {°Ïsuper(Outcome.Detriment);°Ïthis.staticText = "Move any number of +1/+1 counters from target creature onto another target creature with the same controller";°Ï}°Ïpublic MoveCounterFromTargetToTargetEffect(final MoveCounterFromTargetToTargetEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic MoveCounterFromTargetToTargetEffect copy() {°Ïreturn new MoveCounterFromTargetToTargetEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer controller = game.getPlayer(source.getControllerId());°Ïif (controller != null) {°ÏPermanent fromPermanent = game.getPermanent(getTargetPointer().getFirst(game, source));°ÏPermanent toPermanent = null;°Ïif (source.getTargets().size() > 1) {°ÏtoPermanent = game.getPermanent(source.getTargets().get(1).getFirstTarget());°Ï}°Ïif (fromPermanent == null || toPermanent == null || !fromPermanent.getControllerId().equals(toPermanent.getControllerId())) {°Ïreturn false;°Ï}°Ïint amountCounters = fromPermanent.getCounters().getCount(CounterType.P1P1);°Ïif (amountCounters > 0) {°Ïint amountToMove = controller.getAmount(0, amountCounters, "How many counters do you want to move?", game);°Ïif (amountToMove > 0) {°ÏfromPermanent.removeCounters(CounterType.P1P1.createInstance(amountToMove), game);°ÏtoPermanent.addCounters(CounterType.P1P1.createInstance(amountToMove), game);°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ïclass BioshiftSecondTargetCreaturePermanent extends TargetCreaturePermanent {°Ïprivate static final FilterCreaturePermanent filter = new FilterCreaturePermanent("another target creature with the same controller (counters go to)");°ÏBioshiftSecondTargetCreaturePermanent() {°Ïsuper(filter);°Ï}°ÏBioshiftSecondTargetCreaturePermanent(final BioshiftSecondTargetCreaturePermanent target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {°ÏPermanent firstPermanent = game.getPermanent(source.getTargets().getFirstTarget());°ÏPermanent secondPermanent = game.getPermanent(id);°Ïif (firstPermanent != null && secondPermanent != null) {°Ïif (!firstPermanent.getId().equals(id) && firstPermanent.getControllerId().equals(secondPermanent.getControllerId())) {°Ïreturn super.canTarget(controllerId, id, source, game);°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic BioshiftSecondTargetCreaturePermanent copy() {°Ïreturn new BioshiftSecondTargetCreaturePermanent(this);°Ï}°Ï}°Ï
