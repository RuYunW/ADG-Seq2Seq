public class ReflectingPool extends CardImpl {°Ïpublic ReflectingPool(UUID ownerId) {°Ïsuper(ownerId, 328, "Reflecting Pool", Rarity.RARE, new CardType[]{CardType.LAND}, "");°Ïthis.expansionSetCode = "TMP";°Ïthis.addAbility(new ReflectingPoolManaAbility());°Ï}°Ïpublic ReflectingPool(final ReflectingPool card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic ReflectingPool copy() {°Ïreturn new ReflectingPool(this);°Ï}°Ï}°Ïclass ReflectingPoolManaAbility extends ManaAbility {°Ïpublic ReflectingPoolManaAbility() {°Ïsuper(Zone.BATTLEFIELD, new ReflectingPoolEffect(), new TapSourceCost());°Ï}°Ïpublic ReflectingPoolManaAbility(final ReflectingPoolManaAbility ability) {°Ïsuper(ability);°Ï}°Ï@Override°Ïpublic ReflectingPoolManaAbility copy() {°Ïreturn new ReflectingPoolManaAbility(this);°Ï}°Ï@Override°Ïpublic List<Mana> getNetMana(Game game) {°Ïreturn ((ReflectingPoolEffect) getEffects().get(0)).getNetMana(game, this);°Ï}°Ï}°Ïclass ReflectingPoolEffect extends ManaEffect {°Ïprivate static final FilterControlledPermanent filter = new FilterControlledLandPermanent();°Ïpublic ReflectingPoolEffect() {°Ïsuper();°ÏstaticText = "Add to your mana pool one mana of any type that a land you control could produce";°Ï}°Ïpublic ReflectingPoolEffect(final ReflectingPoolEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏMana types = getManaTypes(game, source);°ÏChoice choice = new ChoiceImpl(false);°Ïchoice.setMessage("Pick a mana color");°Ïif (types.getBlack() > 0) {°Ïchoice.getChoices().add("Black");°Ï}°Ïif (types.getRed() > 0) {°Ïchoice.getChoices().add("Red");°Ï}°Ïif (types.getBlue() > 0) {°Ïchoice.getChoices().add("Blue");°Ï}°Ïif (types.getGreen() > 0) {°Ïchoice.getChoices().add("Green");°Ï}°Ïif (types.getWhite() > 0) {°Ïchoice.getChoices().add("White");°Ï}°Ïif (types.getColorless() > 0) {°Ïchoice.getChoices().add("Colorless");°Ï}°Ïif (types.getAny() > 0) {°Ïchoice.getChoices().add("Black");°Ïchoice.getChoices().add("Red");°Ïchoice.getChoices().add("Blue");°Ïchoice.getChoices().add("Green");°Ïchoice.getChoices().add("White");°Ïchoice.getChoices().add("Colorless");°Ï}°Ïif (choice.getChoices().size() > 0) {°ÏPlayer player = game.getPlayer(source.getControllerId());°Ïif (choice.getChoices().size() == 1) {°Ïchoice.setChoice(choice.getChoices().iterator().next());°Ï} else {°Ïplayer.choose(outcome, choice, game);°Ï}°Ïif (choice.getChoice() != null) {°ÏMana mana = new Mana();°Ïswitch (choice.getChoice()) {°Ïcase "Black":°Ïmana.setBlack(1);°Ïbreak;°Ïcase "Blue":°Ïmana.setBlue(1);°Ïbreak;°Ïcase "Red":°Ïmana.setRed(1);°Ïbreak;°Ïcase "Green":°Ïmana.setGreen(1);°Ïbreak;°Ïcase "White":°Ïmana.setWhite(1);°Ïbreak;°Ïcase "Colorless":°Ïmana.setColorless(1);°Ïbreak;°Ï}°ÏcheckToFirePossibleEvents(mana, game, source);°Ïplayer.getManaPool().addMana(mana, game, source);°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ïreturn true;°Ï}°Ïpublic List<Mana> getNetMana(Game game, Ability source) {°ÏList<Mana> netManas = new ArrayList<>();°ÏMana types = getManaTypes(game, source);°Ïif (types.getAny() > 0) {°ÏnetManas.add(new Mana(0, 0, 0, 0, 0, 0, 1, 0));°Ïreturn netManas;°Ï}°Ïif (types.getBlack() > 0) {°ÏnetManas.add(new Mana(ColoredManaSymbol.B));°Ï}°Ïif (types.getRed() > 0) {°ÏnetManas.add(new Mana(ColoredManaSymbol.R));°Ï}°Ïif (types.getBlue() > 0) {°ÏnetManas.add(new Mana(ColoredManaSymbol.U));°Ï}°Ïif (types.getGreen() > 0) {°ÏnetManas.add(new Mana(ColoredManaSymbol.G));°Ï}°Ïif (types.getWhite() > 0) {°ÏnetManas.add(new Mana(ColoredManaSymbol.W));°Ï}°Ïif (types.getColorless() > 0) {°ÏnetManas.add(new Mana(0, 0, 0, 0, 0, 0, 0, 1));°Ï}°Ïreturn netManas;°Ï}°Ïprivate Mana getManaTypes(Game game, Ability source) {°ÏList<Permanent> lands = game.getBattlefield().getActivePermanents(filter, source.getControllerId(), game);°ÏMana types = new Mana();°Ïfor (Permanent land : lands) {°ÏAbilities<ManaAbility> manaAbilities = land.getAbilities().getManaAbilities(Zone.BATTLEFIELD);°Ïfor (ManaAbility ability : manaAbilities) {°Ïif (!ability.equals(source) && ability.definesMana()) {°Ïfor (Mana netMana : ability.getNetMana(game)) {°Ïtypes.add(netMana);°Ïif (netMana.getAny() > 0) {°Ïreturn types;°Ï}°Ï}°Ï}°Ï}°Ï}°Ïreturn types;°Ï}°Ï@Override°Ïpublic Mana getMana(Game game, Ability source) {°Ïreturn null;°Ï}°Ï@Override°Ïpublic ReflectingPoolEffect copy() {°Ïreturn new ReflectingPoolEffect(this);°Ï}°Ï}°Ï
