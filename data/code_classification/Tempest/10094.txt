public class Legerdemain extends CardImpl {°Ïprivate static final FilterPermanent filter = new FilterPermanent("artifact or creature");°Ïstatic {°Ïfilter.add(Predicates.or(new CardTypePredicate(CardType.ARTIFACT), new CardTypePredicate(CardType.CREATURE)));°Ï}°Ïpublic Legerdemain(UUID ownerId) {°Ïsuper(ownerId, 72, "Legerdemain", Rarity.UNCOMMON, new CardType[]{CardType.SORCERY}, "{2}{U}{U}");°Ïthis.expansionSetCode = "TMP";°Ïthis.getSpellAbility().addEffect(new ExchangeControlTargetEffect(Duration.EndOfGame, "Exchange control of target artifact or creature and another target permanent that shares one of those types with it", false, true));°Ïthis.getSpellAbility().addTarget(new TargetPermanent(filter));°Ïthis.getSpellAbility().addTarget(new LegerdemainSecondTarget());°Ï}°Ïpublic Legerdemain(final Legerdemain card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic Legerdemain copy() {°Ïreturn new Legerdemain(this);°Ï}°Ï}°Ïclass LegerdemainSecondTarget extends TargetPermanent {°ÏLegerdemainSecondTarget() {°Ïsuper();°Ïthis.targetName = "another permanent that shares one of those types";°Ï}°ÏLegerdemainSecondTarget(final LegerdemainSecondTarget target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {°ÏPermanent firstPermanent = game.getPermanent(source.getTargets().getFirstTarget());°ÏPermanent secondPermanent = game.getPermanent(id);°Ïif (firstPermanent != null && secondPermanent != null) {°Ïif (firstPermanent.getCardType().contains(CardType.CREATURE) && secondPermanent.getCardType().contains(CardType.CREATURE)) {°Ïreturn true;°Ï}°Ïif (firstPermanent.getCardType().contains(CardType.ARTIFACT) && secondPermanent.getCardType().contains(CardType.ARTIFACT)) {°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic LegerdemainSecondTarget copy() {°Ïreturn new LegerdemainSecondTarget(this);°Ï}°Ï}°Ï
