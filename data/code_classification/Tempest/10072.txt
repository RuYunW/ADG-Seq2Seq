public class Grindstone extends CardImpl {¡ìpublic Grindstone(UUID ownerId) {¡ìsuper(ownerId, 280, "Grindstone", Rarity.RARE, new CardType[]{CardType.ARTIFACT}, "{1}");¡ìthis.expansionSetCode = "TMP";¡ìAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new GrindstoneEffect(), new ManaCostsImpl("{3}"));¡ìability.addCost(new TapSourceCost());¡ìability.addTarget(new TargetPlayer());¡ìthis.addAbility(ability);¡ì}¡ìpublic Grindstone(final Grindstone card) {¡ìsuper(card);¡ì}¡ì@Override¡ìpublic Grindstone copy() {¡ìreturn new Grindstone(this);¡ì}¡ì}¡ìclass GrindstoneEffect extends OneShotEffect {¡ìpublic GrindstoneEffect() {¡ìsuper(Outcome.Benefit);¡ìthis.staticText = "Target player puts the top two cards of his or her library into his or her graveyard. If both cards share a color, repeat this process";¡ì}¡ìpublic GrindstoneEffect(final GrindstoneEffect effect) {¡ìsuper(effect);¡ì}¡ì@Override¡ìpublic GrindstoneEffect copy() {¡ìreturn new GrindstoneEffect(this);¡ì}¡ì@Override¡ìpublic boolean apply(Game game, Ability source) {¡ìPlayer targetPlayer = game.getPlayer(this.getTargetPointer().getFirst(game, source));¡ìboolean colorShared;¡ìif (targetPlayer != null) {¡ìint possibleIterations = targetPlayer.getLibrary().size() / 2;¡ìint iteration = 0;¡ìdo {¡ìiteration++;¡ìif (iteration > possibleIterations + 20) {¡ìgame.setDraw(source.getControllerId());¡ìreturn true;¡ì}¡ìcolorShared = false;¡ìCards cards = new CardsImpl();¡ìcards.addAll(targetPlayer.getLibrary().getTopCards(game, 2));¡ìif (!cards.isEmpty()) {¡ìCard card1 = targetPlayer.getLibrary().removeFromTop(game);¡ìif (targetPlayer.getLibrary().size() > 0) {¡ìcolorShared = card1.getColor(game).shares(targetPlayer.getLibrary().removeFromTop(game).getColor(game));¡ì}¡ì}¡ìtargetPlayer.moveCards(cards, Zone.LIBRARY, Zone.GRAVEYARD, source, game);¡ì} while (colorShared && targetPlayer.canRespond());¡ìreturn true;¡ì}¡ìreturn false;¡ì}¡ì}¡ì
