public class IlluminatedFolio extends CardImpl {°Ïpublic IlluminatedFolio(UUID ownerId) {°Ïsuper(ownerId, 254, "Illuminated Folio", Rarity.UNCOMMON, new CardType[]{CardType.ARTIFACT}, "{5}");°Ïthis.expansionSetCode = "SHM";°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new DrawCardSourceControllerEffect(1), new ManaCostsImpl("{1}"));°Ïability.addCost(new TapSourceCost());°Ïability.addCost(new RevealTwoCardsSharedColorFromHandCost());°Ïthis.addAbility(ability);°Ï}°Ïpublic IlluminatedFolio(final IlluminatedFolio card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic IlluminatedFolio copy() {°Ïreturn new IlluminatedFolio(this);°Ï}°Ï}°Ïclass RevealTwoCardsSharedColorFromHandCost extends RevealTargetFromHandCost {°Ïpublic RevealTwoCardsSharedColorFromHandCost() {°Ïsuper(new TargetTwoCardsWithTheSameColorInHand());°Ï}°Ïpublic RevealTwoCardsSharedColorFromHandCost(RevealTwoCardsSharedColorFromHandCost cost) {°Ïsuper(cost);°Ï}°Ï@Override°Ïpublic RevealTwoCardsSharedColorFromHandCost copy() {°Ïreturn new RevealTwoCardsSharedColorFromHandCost(this);°Ï}°Ï}°Ïclass TargetTwoCardsWithTheSameColorInHand extends TargetCardInHand {°Ïpublic TargetTwoCardsWithTheSameColorInHand() {°Ïsuper(2, 2, new FilterCard("two cards from your hand that share a color"));°Ï}°Ïpublic TargetTwoCardsWithTheSameColorInHand(final TargetTwoCardsWithTheSameColorInHand target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {°ÏSet<UUID> newPossibleTargets = new HashSet<>();°ÏSet<UUID> possibleTargets = new HashSet<>();°ÏPlayer player = game.getPlayer(sourceControllerId);°Ïfor (Card card : player.getHand().getCards(filter, game)) {°ÏpossibleTargets.add(card.getId());°Ï}°ÏCards cardsToCheck = new CardsImpl();°ÏcardsToCheck.addAll(possibleTargets);°Ïif (targets.size() == 1) {°Ïfor (Map.Entry<UUID, Integer> entry : targets.entrySet()) {°ÏCard chosenCard = cardsToCheck.get(entry.getKey(), game);°Ïif (chosenCard != null) {°Ïfor (UUID cardToCheck : cardsToCheck) {°Ïif (!cardToCheck.equals(chosenCard.getId()) && chosenCard.getColor(game).equals(game.getCard(cardToCheck).getColor(game))) {°ÏnewPossibleTargets.add(cardToCheck);°Ï}°Ï}°Ï}°Ï}°Ï} else {°Ïfor (UUID cardToCheck : cardsToCheck) {°ÏFilterCard colorFilter = new FilterCard();°ÏcolorFilter.add(new ColorPredicate(game.getCard(cardToCheck).getColor(game)));°Ïif (cardsToCheck.count(colorFilter, game) > 1) {°ÏnewPossibleTargets.add(cardToCheck);°Ï}°Ï}°Ï}°Ïreturn newPossibleTargets;°Ï}°Ï@Override°Ïpublic boolean canChoose(UUID sourceControllerId, Game game) {°ÏCards cardsToCheck = new CardsImpl();°ÏPlayer player = game.getPlayer(sourceControllerId);°Ïfor (Card card : player.getHand().getCards(filter, game)) {°ÏcardsToCheck.add(card.getId());°Ï}°Ïint possibleCards = 0;°Ïfor (UUID cardToCheck : cardsToCheck) {°ÏFilterCard colorFilter = new FilterCard();°ÏcolorFilter.add(new ColorPredicate(game.getCard(cardToCheck).getColor(game)));°Ïif (cardsToCheck.count(colorFilter, game) > 1) {°Ï++possibleCards;°Ï}°Ï}°Ïreturn possibleCards > 0;°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID id, Game game) {°Ïif (super.canTarget(id, game)) {°ÏCard card = game.getCard(id);°Ïif (card != null) {°Ïif (targets.size() == 1) {°ÏCard card2 = game.getCard(targets.entrySet().iterator().next().getKey());°Ïif (card2 != null && card2.getColor(game).equals(card.getColor(game))) {°Ïreturn true;°Ï}°Ï} else {°ÏFilterCard colorFilter = new FilterCard();°ÏcolorFilter.add(new ColorPredicate(card.getColor(game)));°ÏPlayer player = game.getPlayer(card.getOwnerId());°Ïif (player.getHand().getCards(colorFilter, game).size() > 1) {°Ïreturn true;°Ï}°Ï}°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic TargetTwoCardsWithTheSameColorInHand copy() {°Ïreturn new TargetTwoCardsWithTheSameColorInHand(this);°Ï}°Ï}°Ï
