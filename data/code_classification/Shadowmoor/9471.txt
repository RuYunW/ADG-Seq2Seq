public class ElsewhereFlask extends CardImpl {°Ïpublic ElsewhereFlask(UUID ownerId) {°Ïsuper(ownerId, 250, "Elsewhere Flask", Rarity.COMMON, new CardType[]{CardType.ARTIFACT}, "{2}");°Ïthis.expansionSetCode = "SHM";°Ïthis.addAbility(new EntersBattlefieldTriggeredAbility(new DrawCardSourceControllerEffect(1)));°Ïthis.addAbility(new SimpleActivatedAbility(Zone.BATTLEFIELD, new ElsewhereFlaskEffect(), new SacrificeSourceCost()));°Ï}°Ïpublic ElsewhereFlask(final ElsewhereFlask card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic ElsewhereFlask copy() {°Ïreturn new ElsewhereFlask(this);°Ï}°Ï}°Ïclass ElsewhereFlaskEffect extends OneShotEffect {°Ïpublic ElsewhereFlaskEffect() {°Ïsuper(Outcome.Neutral);°Ïthis.staticText = "Choose a basic land type. Each land you control becomes that type until end of turn";°Ï}°Ïpublic ElsewhereFlaskEffect(final ElsewhereFlaskEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic ElsewhereFlaskEffect copy() {°Ïreturn new ElsewhereFlaskEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer player = game.getPlayer(source.getControllerId());°Ïif (player != null) {°ÏChoice choice = new ChoiceBasicLandType();°Ïif (player.choose(Outcome.Neutral, choice, game)) {°Ïgame.getState().setValue(source.getSourceId().toString() + "_ElsewhereFlask", choice.getChoice());°Ï}°Ïgame.addEffect(new ElsewhereFlaskContinuousEffect(), source);°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ïclass ElsewhereFlaskContinuousEffect extends ContinuousEffectImpl {°Ïprivate static final FilterControlledPermanent filter = new FilterControlledLandPermanent();°Ïpublic ElsewhereFlaskContinuousEffect() {°Ïsuper(Duration.EndOfTurn, Outcome.Neutral);°Ï}°Ïpublic ElsewhereFlaskContinuousEffect(final ElsewhereFlaskContinuousEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic ElsewhereFlaskContinuousEffect copy() {°Ïreturn new ElsewhereFlaskContinuousEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {°ÏString choice = (String) game.getState().getValue(source.getSourceId().toString() + "_ElsewhereFlask");°Ïif (choice != null) {°Ïfor (Permanent land : game.getBattlefield().getActivePermanents(filter, source.getControllerId(), game)) {°Ïif (land != null) {°Ïswitch (layer) {°Ïcase TypeChangingEffects_4:°Ïif (sublayer == SubLayer.NA) {°Ïland.getSubtype().clear();°Ïland.getSubtype().add(choice);°Ï}°Ïbreak;°Ïcase AbilityAddingRemovingEffects_6:°Ïif (sublayer == SubLayer.NA) {°Ïland.getAbilities().clear();°Ïif (choice.equals("Forest")) {°Ïland.addAbility(new GreenManaAbility(), id, game);°Ï}°Ïif (choice.equals("Plains")) {°Ïland.addAbility(new WhiteManaAbility(), id, game);°Ï}°Ïif (choice.equals("Mountain")) {°Ïland.addAbility(new RedManaAbility(), id, game);°Ï}°Ïif (choice.equals("Island")) {°Ïland.addAbility(new BlueManaAbility(), id, game);°Ï}°Ïif (choice.equals("Swamp")) {°Ïland.addAbility(new BlackManaAbility(), id, game);°Ï}°Ï}°Ïbreak;°Ï}°Ï}°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïreturn false;°Ï}°Ï@Override°Ïpublic boolean hasLayer(Layer layer) {°Ïreturn layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;°Ï}°Ï}°Ï
