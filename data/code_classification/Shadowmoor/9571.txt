public class PrismaticOmen extends CardImpl {°Ïpublic PrismaticOmen(UUID ownerId) {°Ïsuper(ownerId, 126, "Prismatic Omen", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, "{1}{G}");°Ïthis.expansionSetCode = "SHM";°Ïthis.addAbility(new SimpleStaticAbility(Zone.BATTLEFIELD, new BecomesBasicLandTypeAllEffect("Swamp", "Mountain", "Forest", "Island", "Plains")));°Ï}°Ïpublic PrismaticOmen(final PrismaticOmen card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic PrismaticOmen copy() {°Ïreturn new PrismaticOmen(this);°Ï}°Ï}°Ïclass BecomesBasicLandTypeAllEffect extends ContinuousEffectImpl {°Ïprotected ArrayList<String> landTypes = new ArrayList<>();°Ïpublic BecomesBasicLandTypeAllEffect(String... landNames) {°Ïsuper(Duration.WhileOnBattlefield, Outcome.Detriment);°ÏlandTypes.addAll(Arrays.asList(landNames));°Ïthis.staticText = "Lands you control are every basic land type in addition to their other types";°Ï}°Ïpublic BecomesBasicLandTypeAllEffect(final BecomesBasicLandTypeAllEffect effect) {°Ïsuper(effect);°Ïthis.landTypes.addAll(effect.landTypes);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïreturn false;°Ï}°Ï@Override°Ïpublic BecomesBasicLandTypeAllEffect copy() {°Ïreturn new BecomesBasicLandTypeAllEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {°Ïfor (Permanent land : game.getState().getBattlefield().getAllActivePermanents(new FilterLandPermanent(), source.getControllerId(), game)) {°Ïif (land != null) {°Ïswitch (layer) {°Ïcase AbilityAddingRemovingEffects_6:°ÏMana mana = new Mana();°Ïfor (Ability ability : land.getAbilities()) {°Ïif (ability instanceof BasicManaAbility) {°Ïfor (Mana netMana : ((BasicManaAbility) ability).getNetMana(game)) {°Ïmana.add(netMana);°Ï}°Ï}°Ï}°Ïif (mana.getGreen() == 0 && landTypes.contains("Forest")) {°Ïland.addAbility(new GreenManaAbility(), source.getSourceId(), game);°Ï}°Ïif (mana.getRed() == 0 && landTypes.contains("Mountain")) {°Ïland.addAbility(new RedManaAbility(), source.getSourceId(), game);°Ï}°Ïif (mana.getBlue() == 0 && landTypes.contains("Island")) {°Ïland.addAbility(new BlueManaAbility(), source.getSourceId(), game);°Ï}°Ïif (mana.getWhite() == 0 && landTypes.contains("Plains")) {°Ïland.addAbility(new WhiteManaAbility(), source.getSourceId(), game);°Ï}°Ïif (mana.getBlack() == 0 && landTypes.contains("Swamp")) {°Ïland.addAbility(new BlackManaAbility(), source.getSourceId(), game);°Ï}°Ïbreak;°Ïcase TypeChangingEffects_4:°Ïfor (String subtype : landTypes) {°Ïif (!land.getSubtype().contains(subtype)) {°Ïland.getSubtype().add(subtype);°Ï}°Ï}°Ïbreak;°Ï}°Ï}°Ï}°Ïreturn true;°Ï}°Ï@Override°Ïpublic boolean hasLayer(Layer layer) {°Ïreturn layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;°Ï}°Ï}°Ï
