public class PlagueOfVermin extends CardImpl {°Ïpublic PlagueOfVermin(UUID ownerId) {°Ïsuper(ownerId, 73, "Plague of Vermin", Rarity.RARE, new CardType[]{CardType.SORCERY}, "{6}{B}");°Ïthis.expansionSetCode = "SHM";°Ïthis.getSpellAbility().addEffect(new PlagueOfVerminEffect());°Ï}°Ïpublic PlagueOfVermin(final PlagueOfVermin card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic PlagueOfVermin copy() {°Ïreturn new PlagueOfVermin(this);°Ï}°Ï}°Ïclass PlagueOfVerminEffect extends OneShotEffect {°Ïpublic PlagueOfVerminEffect() {°Ïsuper(Outcome.PutCardInPlay);°Ïthis.staticText = "Starting with you, each player may pay any amount of life. Repeat this process until no one pays life. Each player puts a 1/1 black Rat creature token onto the battlefield for each 1 life he or she paid this way.";°Ï}°Ïpublic PlagueOfVerminEffect(final PlagueOfVerminEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic PlagueOfVerminEffect copy() {°Ïreturn new PlagueOfVerminEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer controller = game.getPlayer(source.getControllerId());°ÏCard sourceCard = game.getCard(source.getSourceId());°ÏMap<UUID, Integer> payLife = new HashMap<>();°Ïint currentLifePaid;°Ïint totalPaidLife;°Ïif (controller != null) {°ÏPlayerList playerList = game.getState().getPlayerList().copy();°Ïwhile (!playerList.get().equals(source.getControllerId()) && controller.canRespond()) {°ÏplayerList.getNext();°Ï}°ÏPlayer currentPlayer = game.getPlayer(playerList.get());°ÏUUID firstInactivePlayer = null;°Ïwhile (controller.canRespond()) {°Ïif (firstInactivePlayer == null) {°ÏfirstInactivePlayer = currentPlayer.getId();°Ï}°Ïif (currentPlayer != null && currentPlayer.canRespond() && game.getState().getPlayersInRange(controller.getId(), game).contains(currentPlayer.getId())) {°ÏcurrentLifePaid = 0;°ÏtotalPaidLife = 0;°Ïif (currentPlayer.chooseUse(Outcome.AIDontUseIt, "Pay life?", source, game)) {°ÏtotalPaidLife = currentPlayer.getAmount(0, controller.getLife(), "Pay how many life?", game);°Ïif (totalPaidLife > 0) {°ÏcurrentPlayer.loseLife(totalPaidLife, game);°Ïif (payLife.get(currentPlayer.getId()) == null) {°ÏpayLife.put(currentPlayer.getId(), totalPaidLife);°Ï} else {°ÏcurrentLifePaid = payLife.get(currentPlayer.getId());°ÏpayLife.put(currentPlayer.getId(), currentLifePaid + totalPaidLife);°Ï}°Ï}°Ïgame.informPlayers(new StringBuilder(sourceCard.getName()).append(": ").append(currentPlayer.getLogName()).append(" pays ").append(payLife.get(currentPlayer.getId())).append(" life").toString());°ÏfirstInactivePlayer = null;°Ï}°Ï}°ÏplayerList.getNext();°ÏcurrentPlayer = game.getPlayer(playerList.get());°Ïif (currentPlayer.getId().equals(firstInactivePlayer)) {°Ïbreak;°Ï}°Ï}°ÏRatToken token = new RatToken();°Ïfor (Map.Entry<UUID, Integer> entry°Ï: payLife.entrySet()) {°ÏPlayer player = game.getPlayer(entry.getKey());°Ïif (player != null) {°Ïtoken.putOntoBattlefield(entry.getValue(), game, source.getSourceId(), player.getId());°Ï}°Ï}°Ï}°Ïreturn true;°Ï}°Ï}°Ï
