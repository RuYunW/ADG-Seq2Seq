public class GodoBanditWarlord extends CardImpl {°Ïprivate static final FilterCard filter = new FilterCard("an Equipment card");°Ïstatic {°Ïfilter.add(new CardTypePredicate(CardType.ARTIFACT));°Ïfilter.add(new SubtypePredicate("Equipment"));°Ï}°Ïpublic GodoBanditWarlord(UUID ownerId) {°Ïsuper(ownerId, 169, "Godo, Bandit Warlord", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{5}{R}");°Ïthis.expansionSetCode = "CHK";°Ïthis.supertype.add("Legendary");°Ïthis.subtype.add("Human");°Ïthis.subtype.add("Barbarian");°Ïthis.power = new MageInt(3);°Ïthis.toughness = new MageInt(3);°Ïthis.addAbility(new EntersBattlefieldTriggeredAbility(new SearchLibraryPutInPlayEffect(new TargetCardInLibrary(filter), false, true), true));°ÏFilterControlledCreaturePermanent untapFilter = new FilterControlledCreaturePermanent();°ÏuntapFilter.add(Predicates.or(new PermanentIdPredicate(this.getId()), new SubtypePredicate("Samurai")));°ÏAbility ability = new GodoBanditWarlordAttacksTriggeredAbility(new UntapAllControllerEffect(untapFilter,"untap it and all Samurai you control"), false);°Ïability.addEffect(new AdditionalCombatPhaseEffect());°Ïthis.addAbility(ability);°Ï}°Ïpublic GodoBanditWarlord(final GodoBanditWarlord card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic GodoBanditWarlord copy() {°Ïreturn new GodoBanditWarlord(this);°Ï}°Ï}°Ïclass GodoBanditWarlordAttacksTriggeredAbility extends TriggeredAbilityImpl {°Ïpublic GodoBanditWarlordAttacksTriggeredAbility(Effect effect, boolean optional) {°Ïsuper(Zone.BATTLEFIELD, effect, optional);°Ï}°Ïpublic GodoBanditWarlordAttacksTriggeredAbility(final GodoBanditWarlordAttacksTriggeredAbility ability) {°Ïsuper(ability);°Ï}°Ï@Override°Ïpublic void reset(Game game) {°Ïgame.getState().setValue(CardUtil.getCardZoneString("amountAttacks", this.getSourceId(), game), 0);°Ï}°Ï@Override°Ïpublic boolean checkEventType(GameEvent event, Game game) {°Ïreturn event.getType() == EventType.ATTACKER_DECLARED;°Ï}°Ï@Override°Ïpublic boolean checkTrigger(GameEvent event, Game game) {°Ïif (event.getSourceId().equals(this.getSourceId()) ) {°ÏInteger amountAttacks = (Integer) game.getState().getValue(CardUtil.getCardZoneString("amountAttacks", this.getSourceId(), game));°Ïif (amountAttacks == null || amountAttacks < 1) {°Ïif (amountAttacks == null) {°ÏamountAttacks = 1;°Ï} else {°Ï++amountAttacks;°Ï}°Ïgame.getState().setValue(CardUtil.getCardZoneString("amountAttacks", this.getSourceId(), game), amountAttacks);°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic String getRule() {°Ïreturn "Whenever {this} attacks for the first time each turn, " + super.getRule();°Ï}°Ï@Override°Ïpublic GodoBanditWarlordAttacksTriggeredAbility copy() {°Ïreturn new GodoBanditWarlordAttacksTriggeredAbility(this);°Ï}°Ï}°Ïclass AdditionalCombatPhaseEffect extends OneShotEffect {°Ïpublic AdditionalCombatPhaseEffect() {°Ïsuper(Outcome.Benefit);°ÏstaticText = "After this phase, there is an additional combat phase";°Ï}°Ïpublic AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic AdditionalCombatPhaseEffect copy() {°Ïreturn new AdditionalCombatPhaseEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïgame.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false));°Ïreturn true;°Ï}°Ï}°Ï
