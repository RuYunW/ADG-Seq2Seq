public class WickedAkuba extends CardImpl {°Ïprivate static final FilterPlayer filter = new FilterPlayer("player dealt damage by Wicked Akuba this turn");°Ïstatic {°Ïfilter.add(new WickedAkubaPredicate());°Ï}°Ïpublic WickedAkuba(UUID ownerId) {°Ïsuper(ownerId, 150, "Wicked Akuba", Rarity.COMMON, new CardType[]{CardType.CREATURE}, "{B}{B}");°Ïthis.expansionSetCode = "CHK";°Ïthis.subtype.add("Spirit");°Ïthis.power = new MageInt(2);°Ïthis.toughness = new MageInt(2);°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new LoseLifeTargetEffect(1), new ColoredManaCost(ColoredManaSymbol.B));°Ïability.addTarget(new TargetPlayer(1, 1, false, filter));°Ïthis.addAbility(ability);°Ï}°Ïpublic WickedAkuba(final WickedAkuba card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic WickedAkuba copy() {°Ïreturn new WickedAkuba(this);°Ï}°Ï}°Ïclass WickedAkubaPredicate implements ObjectSourcePlayerPredicate<ObjectSourcePlayer<Player>> {°Ï@Override°Ïpublic boolean apply(ObjectSourcePlayer<Player> input, Game game) {°ÏPlayerDamagedBySourceWatcher watcher = (PlayerDamagedBySourceWatcher) game.getState().getWatchers().get("PlayerDamagedBySource", input.getObject().getId());°Ïif (watcher != null) {°Ïreturn watcher.hasSourceDoneDamage(input.getSourceId(), game);°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic String toString() {°Ïreturn "(Player dealt damage by {source} this turn)";°Ï}°Ï}°Ï
