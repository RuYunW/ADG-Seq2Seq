public class KitsuneMystic extends CardImpl {°Ïpublic KitsuneMystic(UUID ownerId) {°Ïsuper(ownerId, 28, "Kitsune Mystic", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{3}{W}");°Ïthis.expansionSetCode = "CHK";°Ïthis.subtype.add("Fox");°Ïthis.subtype.add("Wizard");°Ïthis.power = new MageInt(2);°Ïthis.toughness = new MageInt(3);°Ïthis.flipCard = true;°Ïthis.flipCardName = "Autumn-Tail, Kitsune Sage";°Ïthis.addAbility(new ConditionalTriggeredAbility(°Ïnew OnEventTriggeredAbility(GameEvent.EventType.END_TURN_STEP_PRE, "beginning of the end step", true, new FlipSourceEffect(new AutumnTailKitsuneSage())),°Ïnew EnchantedCondition(2), "At the beginning of the end step, if {this} is enchanted by two or more Auras, flip it."));°Ï}°Ïpublic KitsuneMystic(final KitsuneMystic card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic KitsuneMystic copy() {°Ïreturn new KitsuneMystic(this);°Ï}°Ï}°Ïclass AutumnTailKitsuneSage extends Token {°Ïprivate static final FilterEnchantmentPermanent filter = new FilterEnchantmentPermanent("Aura attached to a creature");°Ïstatic {°Ïfilter.add(new AttachmentAttachedToCardTypePredicate(CardType.CREATURE));°Ïfilter.add(new SubtypePredicate("Aura"));°Ï}°ÏAutumnTailKitsuneSage() {°Ïsuper("Autumn-Tail, Kitsune Sage", "");°Ïsupertype.add("Legendary");°ÏcardType.add(CardType.CREATURE);°Ïcolor.setWhite(true);°Ïsubtype.add("Fox");°Ïsubtype.add("Wizard");°Ïpower = new MageInt(4);°Ïtoughness = new MageInt(5);°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new AutumnTailEffect(), new GenericManaCost(1));°Ïability.addTarget(new TargetPermanent(filter));°Ïability.addTarget(new TargetCreaturePermanent());°Ïthis.addAbility(ability);°Ï}°Ï}°Ïclass AttachmentAttachedToCardTypePredicate implements Predicate<Permanent> {°Ïprivate final CardType cardType;°Ïpublic AttachmentAttachedToCardTypePredicate(CardType cardType) {°Ïthis.cardType = cardType;°Ï}°Ï@Override°Ïpublic boolean apply(Permanent input, Game game) {°Ïif (input.getAttachedTo() != null) {°ÏPermanent attachedTo = game.getPermanent(input.getAttachedTo());°Ïif (attachedTo != null && attachedTo.getCardType().contains(cardType)) {°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic String toString() {°Ïreturn "AttachmentAttachedToCardType(" + cardType + ')';°Ï}°Ï}°Ïclass AutumnTailEffect extends OneShotEffect {°Ïpublic AutumnTailEffect() {°Ïsuper(Outcome.BoostCreature);°Ïthis.staticText = "Attach target Aura attached to a creature to another creature";°Ï}°Ïpublic AutumnTailEffect(final AutumnTailEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic AutumnTailEffect copy() {°Ïreturn new AutumnTailEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPermanent aura = game.getPermanent(source.getFirstTarget());°ÏPermanent creature = game.getPermanent(source.getTargets().get(1).getFirstTarget());°Ïif (aura != null && creature != null) {°ÏPermanent oldCreature = game.getPermanent(aura.getAttachedTo());°Ïif (oldCreature == null || oldCreature.equals(creature)) {°Ïreturn false;°Ï}°Ïif (oldCreature.removeAttachment(aura.getId(), game)) {°Ïreturn creature.addAttachment(aura.getId(), game);°Ï}°Ï}°Ïreturn false;°Ï}°Ï}°Ï
