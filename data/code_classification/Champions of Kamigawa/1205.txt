public class Reciprocate extends CardImpl {°Ïpublic Reciprocate(UUID ownerId) {°Ïsuper(ownerId, 40, "Reciprocate", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, "{W}");°Ïthis.expansionSetCode = "CHK";°Ïthis.getSpellAbility().addEffect(new ExileTargetEffect());°Ïthis.getSpellAbility().addTarget(new ReciprocateTarget());°Ï}°Ïpublic Reciprocate(final Reciprocate card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic Reciprocate copy() {°Ïreturn new Reciprocate(this);°Ï}°Ï}°Ïclass ReciprocateTarget extends TargetPermanent {°Ïpublic ReciprocateTarget() {°Ïsuper(1, 1, new FilterCreaturePermanent(), false);°ÏtargetName = "creature that dealt damage to you this turn";°Ï}°Ïpublic ReciprocateTarget(final ReciprocateTarget target) {°Ïsuper(target);°Ï}°Ï@Override°Ïpublic boolean canTarget(UUID id, Ability source, Game game) {°ÏPlayerDamagedBySourceWatcher watcher = (PlayerDamagedBySourceWatcher) game.getState().getWatchers().get("PlayerDamagedBySource", source.getControllerId());°Ïif (watcher != null && watcher.hasSourceDoneDamage(id, game)) {°Ïreturn super.canTarget(id, source, game);°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {°ÏSet<UUID> availablePossibleTargets = super.possibleTargets(sourceId, sourceControllerId, game);°ÏSet<UUID> possibleTargets = new HashSet<UUID>();°ÏPlayerDamagedBySourceWatcher watcher = (PlayerDamagedBySourceWatcher) game.getState().getWatchers().get("PlayerDamagedBySource", sourceControllerId);°Ïfor (UUID targetId : availablePossibleTargets) {°ÏPermanent permanent = game.getPermanent(targetId);°Ïif (permanent != null && watcher != null && watcher.hasSourceDoneDamage(targetId, game)) {°ÏpossibleTargets.add(targetId);°Ï}°Ï}°Ïreturn possibleTargets;°Ï}°Ï@Override°Ïpublic boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {°Ïint remainingTargets = this.minNumberOfTargets - targets.size();°Ïif (remainingTargets == 0) {°Ïreturn true;°Ï}°Ïint count = 0;°ÏMageObject targetSource = game.getObject(sourceId);°ÏPlayerDamagedBySourceWatcher watcher = (PlayerDamagedBySourceWatcher) game.getState().getWatchers().get("PlayerDamagedBySource", sourceControllerId);°Ïfor (Permanent permanent : game.getBattlefield().getActivePermanents(filter, sourceControllerId, sourceId, game)) {°Ïif (!targets.containsKey(permanent.getId()) && permanent.canBeTargetedBy(targetSource, sourceControllerId, game)°Ï&& watcher != null && watcher.hasSourceDoneDamage(permanent.getId(), game)) {°Ïcount++;°Ïif (count >= remainingTargets) {°Ïreturn true;°Ï}°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic ReciprocateTarget copy() {°Ïreturn new ReciprocateTarget(this);°Ï}°Ï}°Ï
