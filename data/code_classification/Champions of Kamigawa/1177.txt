public class NezumiShortfang extends CardImpl {°Ïpublic NezumiShortfang(UUID ownerId) {°Ïsuper(ownerId, 131, "Nezumi Shortfang", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{1}{B}");°Ïthis.expansionSetCode = "CHK";°Ïthis.subtype.add("Rat");°Ïthis.subtype.add("Rogue");°Ïthis.power = new MageInt(1);°Ïthis.toughness = new MageInt(1);°Ïthis.flipCard = true;°Ïthis.flipCardName = "Stabwhisker the Odious";°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new DiscardTargetEffect(1), new ManaCostsImpl("{1}{B}"));°Ïability.addCost(new TapSourceCost());°Ïability.addTarget(new TargetOpponent());°Ïability.addEffect(new ConditionalOneShotEffect(°Ïnew FlipSourceEffect(new StabwhiskerTheOdious()),°Ïnew CardsInTargetOpponentHandCondition(CardsInTargetOpponentHandCondition.CountType.FEWER_THAN, 1),°Ï"Then if that player has no cards in hand, flip {this}"));°Ïthis.addAbility(ability);°Ï}°Ïpublic NezumiShortfang(final NezumiShortfang card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic NezumiShortfang copy() {°Ïreturn new NezumiShortfang(this);°Ï}°Ï}°Ïclass StabwhiskerTheOdious extends Token {°ÏStabwhiskerTheOdious() {°Ïsuper("Stabwhisker the Odious", "");°Ïsupertype.add("Legendary");°ÏcardType.add(CardType.CREATURE);°Ïcolor.setBlack(true);°Ïsubtype.add("Rat");°Ïsubtype.add("Shaman");°Ïpower = new MageInt(3);°Ïtoughness = new MageInt(3);°Ïthis.addAbility(new BeginningOfUpkeepTriggeredAbility(°ÏZone.BATTLEFIELD, new StabwhiskerLoseLifeEffect(), TargetController.OPPONENT, false, true));°Ï}°Ï}°Ïclass StabwhiskerLoseLifeEffect extends OneShotEffect {°Ïpublic StabwhiskerLoseLifeEffect() {°Ïsuper(Outcome.LoseLife);°Ïthis.staticText = "that player loses 1 life for each card fewer than three in his or her hand";°Ï}°Ïpublic StabwhiskerLoseLifeEffect(final StabwhiskerLoseLifeEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic StabwhiskerLoseLifeEffect copy() {°Ïreturn new StabwhiskerLoseLifeEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer opponent = game.getPlayer(getTargetPointer().getFirst(game, source));°Ïif (opponent != null) {°Ïint lifeLose = 3 - opponent.getHand().size();°Ïif (lifeLose > 0 ) {°Ïopponent.loseLife(lifeLose, game);°Ï}°Ïreturn true;°Ï}°Ïreturn false;°Ï}°Ï}°Ïclass CardsInTargetOpponentHandCondition implements Condition {°Ïpublic static enum CountType { MORE_THAN, FEWER_THAN, EQUAL_TO };°Ïprivate Condition condition;°Ïprivate CountType type;°Ïprivate int count;°Ïpublic CardsInTargetOpponentHandCondition() {°Ïthis(CountType.EQUAL_TO, 0);°Ï}°Ïpublic CardsInTargetOpponentHandCondition (CountType type, int count ) {°Ïthis.type = type;°Ïthis.count = count;°Ï}°Ïpublic CardsInTargetOpponentHandCondition (CountType type, int count, Condition conditionToDecorate ) {°Ïthis(type, count);°Ïthis.condition = conditionToDecorate;°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°Ïboolean conditionApplies = false;°ÏPlayer opponent = game.getPlayer(source.getFirstTarget());°Ïif (opponent == null) {°Ïreturn false;°Ï}°Ïswitch ( this.type ) {°Ïcase FEWER_THAN:°ÏconditionApplies = opponent.getHand().size() < this.count;°Ïbreak;°Ïcase MORE_THAN:°ÏconditionApplies = opponent.getHand().size() > this.count;°Ïbreak;°Ïcase EQUAL_TO:°ÏconditionApplies = opponent.getHand().size() == this.count;°Ïbreak;°Ï}°Ïif ( this.condition != null ) {°ÏconditionApplies = conditionApplies && this.condition.apply(game, source);°Ï}°Ïreturn conditionApplies;°Ï}°Ï}°Ï
