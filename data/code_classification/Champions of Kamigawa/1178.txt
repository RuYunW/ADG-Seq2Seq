public class NightDealings extends CardImpl {°Ïpublic NightDealings(UUID ownerId) {°Ïsuper(ownerId, 132, "Night Dealings", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, "{2}{B}{B}");°Ïthis.expansionSetCode = "CHK";°Ïthis.addAbility((new NightDealingsTriggeredAbility()));°ÏAbility ability = new SimpleActivatedAbility(Zone.BATTLEFIELD, new NightDealingsSearchEffect(), new ManaCostsImpl("{2}{B}{B}"));°Ïability.addCost(new RemoveVariableCountersSourceCost(CounterType.THEFT.createInstance(1)));°Ïthis.addAbility(ability);°Ï}°Ïpublic NightDealings(final NightDealings card) {°Ïsuper(card);°Ï}°Ï@Override°Ïpublic NightDealings copy() {°Ïreturn new NightDealings(this);°Ï}°Ïprivate class NightDealingsTriggeredAbility extends TriggeredAbilityImpl {°Ïpublic NightDealingsTriggeredAbility() {°Ïsuper(Zone.BATTLEFIELD, new NightDealingsEffect());°Ï}°Ïpublic NightDealingsTriggeredAbility(final NightDealingsTriggeredAbility ability) {°Ïsuper(ability);°Ï}°Ï@Override°Ïpublic NightDealingsTriggeredAbility copy() {°Ïreturn new NightDealingsTriggeredAbility(this);°Ï}°Ï@Override°Ïpublic boolean checkEventType(GameEvent event, Game game) {°Ïreturn event.getType() == GameEvent.EventType.DAMAGED_PLAYER;°Ï}°Ï@Override°Ïpublic boolean checkTrigger(GameEvent event, Game game) {°Ïif (this.getControllerId() != event.getTargetId()) {°ÏUUID sourceControllerId = game.getControllerId(event.getSourceId());°Ïif (sourceControllerId != null && sourceControllerId.equals(this.getControllerId())) {°Ïthis.getEffects().get(0).setValue("damageAmount", event.getAmount());°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï@Override°Ïpublic String getRule() {°Ïreturn "Whenever a source you control deals damage to another player, " + super.getRule();°Ï}°Ï}°Ïprivate class NightDealingsEffect extends OneShotEffect {°Ïpublic NightDealingsEffect() {°Ïsuper(Outcome.Damage);°Ïthis.staticText = "put that many theft counters on {this}";°Ï}°Ïpublic NightDealingsEffect(final NightDealingsEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic NightDealingsEffect copy() {°Ïreturn new NightDealingsEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏInteger damageAmount = (Integer) this.getValue("damageAmount");°Ïif (damageAmount != null) {°ÏPermanent permanent = game.getPermanent(source.getSourceId());°Ïif (permanent != null) {°Ïpermanent.addCounters(CounterType.THEFT.createInstance(damageAmount), game);°Ïreturn true;°Ï}°Ï}°Ïreturn false;°Ï}°Ï}°Ïprivate class NightDealingsSearchEffect extends OneShotEffect {°Ïpublic NightDealingsSearchEffect() {°Ïsuper(Outcome.DrawCard);°Ïthis.staticText = "Search your library for a nonland card with converted mana cost X, reveal it, and put it into your hand. Then shuffle your library";°Ï}°Ïpublic NightDealingsSearchEffect(final NightDealingsSearchEffect effect) {°Ïsuper(effect);°Ï}°Ï@Override°Ïpublic NightDealingsSearchEffect copy() {°Ïreturn new NightDealingsSearchEffect(this);°Ï}°Ï@Override°Ïpublic boolean apply(Game game, Ability source) {°ÏPlayer player = game.getPlayer(source.getControllerId());°Ïif (player == null) {°Ïreturn false;°Ï}°Ïint cmc = 0;°Ïfor (Cost cost : source.getCosts()) {°Ïif (cost instanceof RemoveVariableCountersSourceCost) {°Ïcmc = ((RemoveVariableCountersSourceCost) cost).getAmount();°Ï}°Ï}°ÏFilterNonlandCard filter = new FilterNonlandCard("nonland card with converted mana cost X = " + cmc);°Ïfilter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.Equal, cmc));°ÏTargetCardInLibrary target = new TargetCardInLibrary(filter);°Ïif (player.searchLibrary(target, game)) {°ÏCard card = player.getLibrary().getCard(target.getFirstTarget(), game);°Ïif (card != null) {°Ïcard.moveToZone(Zone.HAND, source.getSourceId(), game, false);°ÏString name = "Reveal";°ÏCards cards = new CardsImpl();°Ïcards.add(card);°ÏCard sourceCard = game.getCard(source.getSourceId());°Ïif (sourceCard != null) {°Ïname = sourceCard.getName();°Ï}°Ïplayer.revealCards(name, cards, game);°Ïgame.informPlayers(player.getLogName() + " reveals " + card.getName());°Ï}°Ïplayer.shuffleLibrary(game);°Ïreturn true;°Ï}°Ïplayer.shuffleLibrary(game);°Ïreturn false;°Ï}°Ï}°Ï}°Ï
